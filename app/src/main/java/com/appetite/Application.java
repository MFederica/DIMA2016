//
// Copyright 2016 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to 
// copy, distribute and modify it.
//
// Source code generated from template: aws-my-sample-app-android v0.7
//
package com.appetite;

import android.support.multidex.MultiDexApplication;
import android.util.Log;

import com.amazonaws.mobile.AWSMobileClient;
import com.appetite.model.FavoritesHelper;
import com.appetite.model.ShoppingListHelper;
import com.nostra13.universalimageloader.cache.memory.impl.WeakMemoryCache;
import com.nostra13.universalimageloader.core.DisplayImageOptions;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.nostra13.universalimageloader.core.ImageLoaderConfiguration;
import com.nostra13.universalimageloader.core.assist.ImageScaleType;
import com.nostra13.universalimageloader.core.display.FadeInBitmapDisplayer;

/**
 * Application class responsible for initializing singletons and other common components.
 */
public class Application extends MultiDexApplication {

    private final static String LOG_TAG = Application.class.getSimpleName();

    @Override
    public void onCreate() {
        Log.d(LOG_TAG, "Application.onCreate - Initializing application...");
        super.onCreate();
        initializeApplication();
        Log.d(LOG_TAG, "Application.onCreate - Application initialized OK");

        // UNIVERSAL IMAGE LOADER SETUP
        DisplayImageOptions defaultOptions = new DisplayImageOptions.Builder()
                .imageScaleType(ImageScaleType.EXACTLY)
                .displayer(new FadeInBitmapDisplayer(300))
                .showImageOnLoading(R.drawable.appetizer)
                .cacheOnDisk(true).build();

        ImageLoaderConfiguration config = new ImageLoaderConfiguration.Builder(
                getApplicationContext())
                .defaultDisplayImageOptions(defaultOptions)
                .memoryCache(new WeakMemoryCache()).build();

        ImageLoader.getInstance().init(config);
        // END - UNIVERSAL IMAGE LOADER SETUP

        // SHOPPING LIST HELPER SETUP
        ShoppingListHelper.getInstance(getApplicationContext());
        // END - SHOPPING LIST HELPER SETUP

        // FAVORITES HELPER SETUP
        FavoritesHelper.getInstance(getApplicationContext());
        // END - FAVORITES HELPER SETUP

        // TODO rimuovere: da qua (logger)
        ShoppingListHelper slh = ShoppingListHelper.getInstance(getApplicationContext());
        Log.d(LOG_TAG, "Instance of ShoppingListHelper contains "+ String.valueOf(slh.shoppingList.size()) + " items");
        String string = "";
        for (int i =0; i < slh.shoppingList.size(); i++) {
            string.concat(" "+slh.shoppingList.get(i).getRecipe());
        }
        Log.d(LOG_TAG, "Instance of ShoppingListHelper contains recipes: "+ string);

        FavoritesHelper flh = FavoritesHelper.getInstance(getApplicationContext());
        Log.d(LOG_TAG, "Instance of FavoritesHelper contains "+ String.valueOf(flh.favoritesList.size()) + " items");
        String stringa = "";
        for (int i =0; i < flh.favoritesList.size(); i++) {
            stringa.concat(" "+flh.favoritesList.get(i));
        }
        Log.d(LOG_TAG, "Instance of FavoritesHelper contains recipes: "+ stringa);
        //TODO rimuovere: fino a qua (logger)
    }

    private void initializeApplication() {
        AWSMobileClient.initializeMobileClientIfNecessary(getApplicationContext());

        // ...Put any application-specific initialization logic here...
    }

    /**
     * Converts a number to its fractional representation
     * @param d number
     * @param factor maxmimum denominator we allow
     * @return fractional representation of number d
     */
    public static String toFraction(double d, int factor) {
        StringBuilder sb = new StringBuilder();
        // check negative number
        if (d < 0) {
            sb.append('-');
            d = -d;
        }
        // first digit to string
        long l = (long) d;
        if (l != 0) sb.append(l);
        d -= l;
        // compute fractional part
        double error = Math.abs(d);
        int bestDenominator = 1;
        for(int i=2;i<=factor;i++) {
            double error2 = Math.abs(d - (double) Math.round(d * i) / i);
            if (error2 < error) {
                error = error2;
                bestDenominator = i;
            }
        }
        // fraction to string
        if (bestDenominator > 1) {
            if (l != 0) {
                sb.append(' ');
            }
            sb.append(Math.round(d * bestDenominator)).append('/').append(bestDenominator);
        }
        return sb.toString();
    }
}
