//
// Copyright 2016 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to 
// copy, distribute and modify it.
//
// Source code generated from template: aws-my-sample-app-android v0.7
//
package com.appetite;

import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.res.Configuration;
import android.database.Cursor;
import android.database.MatrixCursor;
import android.graphics.Color;
import android.os.AsyncTask;
import android.os.Bundle;
import android.provider.BaseColumns;
import android.support.design.widget.NavigationView;
import android.support.design.widget.Snackbar;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentTransaction;
import android.support.v4.view.GravityCompat;
import android.support.v4.view.MenuItemCompat;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.ActionBar;
import android.support.v7.app.ActionBarDrawerToggle;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.SearchView;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.view.Gravity;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.support.v4.widget.CursorAdapter;
import android.support.v4.widget.SimpleCursorAdapter;
import android.view.ViewGroup;
import android.widget.ExpandableListAdapter;
import android.widget.ExpandableListView;
import android.widget.TextView;
import android.widget.Toast;

import com.amazonaws.mobile.AWSMobileClient;
import com.amazonaws.mobile.user.IdentityManager;
import com.amazonaws.mobileconnectors.dynamodbv2.dynamodbmapper.ArgumentMarshaller;
import com.amazonaws.mobileconnectors.dynamodbv2.dynamodbmapper.DynamoDBMapper;
import com.amazonaws.mobileconnectors.dynamodbv2.dynamodbmapper.DynamoDBQueryExpression;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.appetite.model.FavoriteItem;
import com.appetite.model.Filter;
import com.appetite.model.Recipe;
import com.appetite.model.ShoppingItem;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class ActivityMain extends AppCompatActivity implements NavigationView.OnNavigationItemSelectedListener, FragmentCategoriesList.OnCategorySelectedListener, FragmentRecipesList.OnRecipeSelectedListener,
        FragmentShoppingList.OnShoppingListFragmentInteractionListener, FragmentShoppingListIngredients.OnShoppingListIngredientFragmentInteractionListener, FragmentFavoritesList.OnFavoritesListFragmentInteractionListener {
    /**
     * Class name for log messages.
     */
    private final static String TAG = ActivityMain.class.getSimpleName();

    public final static String RECIPE_SELECTED = "com.appetite.ActivityMain.RECIPE_SELECTED";
    public final static String RECIPE_NAME_SELECTED = "com.appetite.ActivityMain.RECIPE_NAME_SELECTED";
    public final static String FRAGMENT = "com.appetite.ActivityMain.FRAGMENT";
    public final static String fileShoppingListName = "shopping_list";
    public final static String fileFavoritesName = "favorites";

    public final static String PATH_RECIPE = "http://dima-mobilehub-516910810-category.s3.amazonaws.com/";
    public final static String PATH_RECIPE_STEP = "http://dima-mobilehub-516910810-category.s3.amazonaws.com/Steps/";
    public final static String ACTIVE_FILTER = "true";
    /**
     * Bundle key for saving/restoring the toolbar title.
     */
    private final static String BUNDLE_KEY_TOOLBAR_TITLE = "title";
    /**
     * The identity manager used to keep track of the current user account.
     */
    private IdentityManager identityManager;
    /**
     * The toolbar view control.
     */
    private Toolbar toolbar;
    /**
     * The navigation view for the drawer item.
     */
    private NavigationView navigationView;
    private DrawerLayout mDrawerLayout;
    private ActionBarDrawerToggle mDrawerToggle;
    private CharSequence mDrawerTitle;
    private CharSequence mTitle;
    private SearchView searchView;
    private MenuItem searchMenuItem;
    private boolean isSearchViewOpen;

    /**
     * The navigation view for the drawer item for filters.
     */
    private NavigationView navigationViewFilters;

    /**
     * All the bundle saved from the fragments
     */
    private Bundle categoryBundle;

    /**
     * The helper class used to toggle the left navigation drawer open and closed.
     */
    private ActionBarDrawerToggle drawerToggle;

    private ArrayList<String> recipeNameList;

    private SimpleCursorAdapter mAdapter;

    private String query = "";

    AmazonDynamoDB dynamoDBClient = AWSMobileClient.defaultMobileClient().getDynamoDBClient();
    DynamoDBMapper mapper = new DynamoDBMapper(dynamoDBClient);
    //Constants TODO: Create a Class that contains all the constants needed (ci sono pure in FragmentRecipesList)
    private final String recipeTable = "dima-mobilehub-516910810-Recipe";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        // Obtain a reference to the mobile client. It is created in the Application class,
        // but in case a custom Application class is not used, we initialize it here if necessary.
        AWSMobileClient.initializeMobileClientIfNecessary(this);
        // Obtain a reference to the mobile client. It is created in the Application class.
        final AWSMobileClient awsMobileClient = AWSMobileClient.defaultMobileClient();
        // Obtain a reference to the identity manager.
        identityManager = awsMobileClient.getIdentityManager();

        setSharedPref();

        if(recipeNameList != null) {
            Log.e("MainActivity:", recipeNameList.toString());
        }
        setContentView(R.layout.activity_main);

        navigationView = (NavigationView) findViewById(R.id.nav_view);
        navigationView.setNavigationItemSelectedListener(this);

        navigationViewFilters = (NavigationView) findViewById(R.id.nav_filters);
        navigationViewFilters.setNavigationItemSelectedListener(new NavigationView.OnNavigationItemSelectedListener() {
            @Override
            public boolean onNavigationItemSelected(MenuItem menuItem) {
                Filter filter = Filter.getInstance(getApplicationContext());
                String filterKey;
                String previousTimeFilter;
                MenuItem previousMenuItem;
                Fragment f = getSupportFragmentManager().findFragmentById(R.id.main_fragment_container);

                switch (menuItem.getItemId()) {
                    case R.id.difficulty_easy:
                        filterKey = getResources().getString(R.string.difficulty_easy);
                        if(filter.getFilterStatus(filterKey).equals(ACTIVE_FILTER)) {
                            filter.deactivateFilter(filterKey);
                            filter.setGroupFilterDeactivation(filterKey);
                            menuItem.setChecked(false);
                        } else {
                            filter.activateFilter(filterKey);
                            filter.setGroupFilterActivation(filterKey);
                            menuItem.setChecked(true);
                        }
                        if(f instanceof FragmentRecipesList)
                            ((FragmentRecipesList) f).onFilterChange();
                        break;
                    case R.id.difficulty_medium:
                        filterKey = getResources().getString(R.string.difficulty_medium);
                        if(filter.getFilterStatus(filterKey).equals(ACTIVE_FILTER)) {
                            filter.deactivateFilter(filterKey);
                            filter.setGroupFilterDeactivation(filterKey);
                            menuItem.setChecked(false);
                        } else {
                            filter.activateFilter(filterKey);
                            filter.setGroupFilterActivation(filterKey);
                            menuItem.setChecked(true);
                        }
                        if(f instanceof FragmentRecipesList)
                            ((FragmentRecipesList) f).onFilterChange();
                        break;
                    case R.id.difficulty_hard:
                        filterKey = getResources().getString(R.string.difficulty_hard);
                        if(filter.getFilterStatus(filterKey).equals(ACTIVE_FILTER)) {
                            filter.deactivateFilter(filterKey);
                            filter.setGroupFilterDeactivation(filterKey);
                            menuItem.setChecked(false);
                        } else {
                            filter.activateFilter(filterKey);
                            filter.setGroupFilterActivation(filterKey);
                            menuItem.setChecked(true);
                        }
                        if(f instanceof FragmentRecipesList)
                            ((FragmentRecipesList) f).onFilterChange();
                        break;

                    //these have different exclusive behaviour that must be dealt
                    case R.id.time_20:
                        previousTimeFilter = getLastTimeFilterActive();
                        Log.e("previousTimeFilter: ",previousTimeFilter);
                        filterKey = getResources().getString(R.string.time_20);
                        if(previousTimeFilter.equals(filterKey)) {
                            filter.deactivateFilter(filterKey);
                            filter.setGroupFilterDeactivation(filterKey);
                            menuItem.setChecked(false);
                        } else if(previousTimeFilter.equals("null")) {
                            filter.activateFilter(filterKey);
                            filter.setGroupFilterActivation(filterKey);
                            menuItem.setChecked(true);
                        } else {
                                filter.activateFilter(filterKey);
                                filter.setGroupFilterActivation(filterKey);
                                menuItem.setChecked(true);
                                filter.deactivateFilter(previousTimeFilter);
                                filter.setGroupFilterDeactivation(previousTimeFilter);
                                previousMenuItem = getPreviousMenuItem(previousTimeFilter);
                                previousMenuItem.setChecked(false);
                        }
                        if(f instanceof FragmentRecipesList)
                            ((FragmentRecipesList) f).onFilterChange();
                        break;
                    case R.id.time_30:
                        previousTimeFilter = getLastTimeFilterActive();
                        Log.e("previousTimeFilter: ",previousTimeFilter);
                        filterKey = getResources().getString(R.string.time_30);
                        if(previousTimeFilter.equals(filterKey)) {
                            filter.deactivateFilter(filterKey);
                            filter.setGroupFilterDeactivation(filterKey);
                            menuItem.setChecked(false);
                        } else if(previousTimeFilter.equals("null")) {
                            filter.activateFilter(filterKey);
                            filter.setGroupFilterActivation(filterKey);
                            menuItem.setChecked(true);
                        } else {
                            filter.activateFilter(filterKey);
                            filter.setGroupFilterActivation(filterKey);
                            menuItem.setChecked(true);
                            filter.deactivateFilter(previousTimeFilter);
                            filter.setGroupFilterDeactivation(previousTimeFilter);
                            previousMenuItem = getPreviousMenuItem(previousTimeFilter);
                            previousMenuItem.setChecked(false);
                        }
                        if(f instanceof FragmentRecipesList)
                            ((FragmentRecipesList) f).onFilterChange();
                        break;
                    case R.id.time_60:
                        previousTimeFilter = getLastTimeFilterActive();
                        Log.e("previousTimeFilter: ",previousTimeFilter);
                        filterKey = getResources().getString(R.string.time_60);
                        if(previousTimeFilter.equals(filterKey)) {
                            filter.deactivateFilter(filterKey);
                            filter.setGroupFilterDeactivation(filterKey);
                            menuItem.setChecked(false);
                        } else if(previousTimeFilter.equals("null")) {
                            filter.activateFilter(filterKey);
                            filter.setGroupFilterActivation(filterKey);
                            menuItem.setChecked(true);
                        } else {
                            filter.activateFilter(filterKey);
                            filter.setGroupFilterActivation(filterKey);
                            menuItem.setChecked(true);
                            filter.deactivateFilter(previousTimeFilter);
                            filter.setGroupFilterDeactivation(previousTimeFilter);
                            previousMenuItem = getPreviousMenuItem(previousTimeFilter);
                            previousMenuItem.setChecked(false);
                        }
                        if(f instanceof FragmentRecipesList)
                            ((FragmentRecipesList) f).onFilterChange();
                        break;

                    case R.id.country_asia:
                        filterKey = getResources().getString(R.string.country_asia);
                        if(filter.getFilterStatus(filterKey).equals(ACTIVE_FILTER)) {
                            filter.deactivateFilter(filterKey);
                            filter.setGroupFilterDeactivation(filterKey);
                            menuItem.setChecked(false);
                        } else {
                            filter.activateFilter(filterKey);
                            filter.setGroupFilterActivation(filterKey);
                            menuItem.setChecked(true);
                        }
                        if(f instanceof FragmentRecipesList)
                            ((FragmentRecipesList) f).onFilterChange();
                        break;
                    case R.id.country_america:
                        filterKey = getResources().getString(R.string.country_america);
                        if(filter.getFilterStatus(filterKey).equals(ACTIVE_FILTER)) {
                            filter.deactivateFilter(filterKey);
                            filter.setGroupFilterDeactivation(filterKey);
                            menuItem.setChecked(false);
                        } else {
                            filter.activateFilter(filterKey);
                            filter.setGroupFilterActivation(filterKey);
                            menuItem.setChecked(true);
                        }
                        if(f instanceof FragmentRecipesList)
                            ((FragmentRecipesList) f).onFilterChange();
                        break;
                    case R.id.country_england:
                        filterKey = getResources().getString(R.string.country_england);
                        if(filter.getFilterStatus(filterKey).equals(ACTIVE_FILTER)) {
                            filter.deactivateFilter(filterKey);
                            filter.setGroupFilterDeactivation(filterKey);
                            menuItem.setChecked(false);
                        } else {
                            filter.activateFilter(filterKey);
                            filter.setGroupFilterActivation(filterKey);
                            menuItem.setChecked(true);
                        }
                        if(f instanceof FragmentRecipesList)
                            ((FragmentRecipesList) f).onFilterChange();
                        break;
                    case R.id.country_france:
                        filterKey = getResources().getString(R.string.country_france);
                        if(filter.getFilterStatus(filterKey).equals(ACTIVE_FILTER)) {
                            filter.deactivateFilter(filterKey);
                            filter.setGroupFilterDeactivation(filterKey);
                            menuItem.setChecked(false);
                        } else {
                            filter.activateFilter(filterKey);
                            filter.setGroupFilterActivation(filterKey);
                            menuItem.setChecked(true);
                        }
                        if(f instanceof FragmentRecipesList)
                            ((FragmentRecipesList) f).onFilterChange();
                        break;
                    case R.id.country_italy:
                        filterKey = getResources().getString(R.string.country_italy);
                        if(filter.getFilterStatus(filterKey).equals(ACTIVE_FILTER)) {
                            filter.deactivateFilter(filterKey);
                            filter.setGroupFilterDeactivation(filterKey);
                            menuItem.setChecked(false);
                        } else {
                            filter.activateFilter(filterKey);
                            filter.setGroupFilterActivation(filterKey);
                            menuItem.setChecked(true);
                        }
                        if(f instanceof FragmentRecipesList)
                            ((FragmentRecipesList) f).onFilterChange();
                        break;
                    case R.id.country_middle_orient:
                        filterKey = getResources().getString(R.string.country_middle_orient);
                        if(filter.getFilterStatus(filterKey).equals(ACTIVE_FILTER)) {
                            filter.deactivateFilter(filterKey);
                            filter.setGroupFilterDeactivation(filterKey);
                            menuItem.setChecked(false);
                        } else {
                            filter.activateFilter(filterKey);
                            filter.setGroupFilterActivation(filterKey);
                            menuItem.setChecked(true);
                        }
                        if(f instanceof FragmentRecipesList)
                            ((FragmentRecipesList) f).onFilterChange();
                        break;
                    default:
                        Toast.makeText(getApplicationContext(), "Somethings Wrong", Toast.LENGTH_SHORT).show();
                        return true;
                }

                ArrayList<String> activated = filter.getActivatedFilters();
                if(activated != null) {
                    for (int i = 0; i < activated.size(); i++){
                        Log.e("ActivatedFilter", activated.get(i));
                    }
                }
            return true;
            }
        });

        // Check that the activity is using the layout version with
        // the fragment_container FrameLayout
        if (findViewById(R.id.main_fragment_container) != null) {
            // However, if we're being restored from a previous state,
            // then we don't need to do anything and should return or else
            // we could end up with overlapping fragments.
            if (savedInstanceState == null) {
                // Create a new Fragment to be placed in the activity layout
                Class fragmentClass = null;
                Fragment fragment = null;
                // In case this activity was started with special instructions from an
                // Intent, pass the Intent's extras to the fragment as arguments and instantiate
                // the right fragment
                if (getIntent().getStringExtra(FRAGMENT) != null) {
                    if (getIntent().getStringExtra(FRAGMENT).equals(FragmentShoppingList.class.getSimpleName())) {
                        navigationView.getMenu().findItem(R.id.drawer_item_shopping_list).setChecked(true);
                        Log.i(TAG, "onCreate (intent): " + FragmentShoppingList.class.getSimpleName());
                        fragmentClass = FragmentShoppingList.class;
                        fragment = Fragment.instantiate(this, fragmentClass.getName());
                    }
                } else {
                    navigationView.getMenu().findItem(R.id.drawer_item_home).setChecked(true);
                    fragmentClass = FragmentHome.class;
                    fragment = Fragment.instantiate(this, fragmentClass.getName());
                    fragment.setArguments(getIntent().getExtras());
                }
                // Add the fragment to the 'fragment_container' FrameLayout
                getSupportFragmentManager().beginTransaction()
                        .add(R.id.main_fragment_container, fragment, fragmentClass.getSimpleName()).commit();
            }
        }

        toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);

        //Set things for the research
        final String[] from = new String[] {"recipeName"};
        final int[] to = new int[] {android.R.id.text1};
        mAdapter = new SimpleCursorAdapter(this, R.layout.search_list_item, null, from, to,CursorAdapter.FLAG_REGISTER_CONTENT_OBSERVER);


        mDrawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
        mDrawerToggle = new ActionBarDrawerToggle(this, mDrawerLayout, toolbar,
                R.string.drawer_open, R.string.drawer_close) {

            /** Called when a drawer has settled in a completely closed state. */
            @Override
            public void onDrawerClosed(View view) {
                super.onDrawerClosed(view);
                //       getActionBar().setTitle(mTitle);
                //       invalidateOptionsMenu(); // creates call to onPrepareOptionsMenu()
            }

            /** Called when a drawer has settled in a completely open state. */
            @Override
            public void onDrawerOpened(View drawerView) {
                super.onDrawerOpened(drawerView);
                //       getActionBar().setTitle(mDrawerTitle);
                //       invalidateOptionsMenu(); // creates call to onPrepareOptionsMenu()
            }
        };

        // Set the drawer toggle as the DrawerListener
        mDrawerLayout.addDrawerListener(mDrawerToggle);
        // Show the hamburger icon
        mDrawerToggle.syncState();

        mTitle = mDrawerTitle = getTitle();
    }

    @Override
    public boolean onNavigationItemSelected(MenuItem menuItem) {
        mDrawerLayout.closeDrawers();
        // Clear back stack when navigating from the Nav Drawer.
        android.support.v4.app.FragmentManager supportFragmentManager = getSupportFragmentManager();
        supportFragmentManager.popBackStack(null, FragmentManager.POP_BACK_STACK_INCLUSIVE);
        Log.i(TAG, "onNavigationItemSelected: CANCELLATO IL BACK STACK");

        android.support.v4.app.FragmentTransaction fragmentTransaction = supportFragmentManager.beginTransaction();
        Class fragmentClass;
        Fragment fragment;

        //Check to see which item was being clicked and perform appropriate action
        switch (menuItem.getItemId()) {

            case R.id.drawer_item_home:
            //    Toast.makeText(getApplicationContext(), "Home Selected", Toast.LENGTH_SHORT).show();
                fragmentClass = FragmentHome.class;
                break;
            //Replacing the main content with ContentFragment Which is our Inbox View;
            case R.id.drawer_item_categories:
            //    Toast.makeText(getApplicationContext(), "Categories Selected", Toast.LENGTH_SHORT).show();
                fragmentClass = FragmentCategoriesList.class;
                break;
            // For rest of the options we just show a toast on click
            case R.id.drawer_item_how_to:
                Toast.makeText(getApplicationContext(), "Not yet implemented", Toast.LENGTH_SHORT).show();
                return true;
            case R.id.drawer_item_shopping_list:
             //   Toast.makeText(getApplicationContext(), "Shopping list Selected", Toast.LENGTH_SHORT).show();
                fragmentClass = FragmentShoppingList.class;
                break;
            case R.id.drawer_item_favourite:
              //  Toast.makeText(getApplicationContext(), "Favourites Selected", Toast.LENGTH_SHORT).show();
                fragmentClass = FragmentFavoritesList.class;
                break;
            default:
             //   Toast.makeText(getApplicationContext(), "Somethings Wrong", Toast.LENGTH_SHORT).show();
                return true;
        }
        fragment = Fragment.instantiate(this, fragmentClass.getName());

        fragmentTransaction.replace(R.id.main_fragment_container, fragment, fragmentClass.getSimpleName());
        fragmentTransaction.commit();
        return true;
    }

    @Override
    public void onBackPressed() {
        final FragmentManager fragmentManager = this.getSupportFragmentManager();
        Log.e(TAG, "onBackPressed: BackStackEntryCount = " + fragmentManager.getBackStackEntryCount());
        if (mDrawerLayout.isDrawerOpen(GravityCompat.START)) {
            mDrawerLayout.closeDrawer(GravityCompat.START);
            return;
        }
        if (mDrawerLayout.isDrawerOpen(GravityCompat.END)) {
            mDrawerLayout.closeDrawer(GravityCompat.END);
            return;
        }
        if (fragmentManager.getBackStackEntryCount() == 0) {
            if (fragmentManager.findFragmentByTag(FragmentHome.class.getSimpleName()) == null) {
                final Class fragmentClass = FragmentHome.class;
                // if we aren't on the home fragment, navigate home.
                final Fragment fragment = Fragment.instantiate(this, fragmentClass.getName());

                fragmentManager
                        .beginTransaction()
                        .replace(R.id.main_fragment_container, fragment, fragmentClass.getSimpleName())
                        .setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN)
                        .commit();

                ///////TODO considerare se tenere questo metodo anzichè le righe sopra
                ///////onNavigationItemSelected(navigationView.getMenu().findItem(R.id.drawer_item_home));

                navigationView.getMenu().findItem(R.id.drawer_item_home).setChecked(true);
                // Set the title for the fragment.
                final ActionBar actionBar = this.getSupportActionBar();
                if (actionBar != null) {
                    actionBar.setTitle(getString(R.string.app_name));
                }
                return;
            }
        }
        super.onBackPressed();

    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        Log.e(TAG, "onCreateOptionsMenu: ");
        getMenuInflater().inflate(R.menu.activity_main, menu);
        super.onCreateOptionsMenu(menu);
        return true;
    }

    @Override
    public boolean onPrepareOptionsMenu(Menu menu) {
        // Associate searchable configuration with the SearchView
        // Add SearchWidget.
        Log.e(TAG, "onPrepareOptionsMenu: ");
        searchView = (SearchView) MenuItemCompat
                .getActionView(menu.findItem(R.id.search));
        searchView.setQueryHint("Search recipe..");
        searchView.setSuggestionsAdapter(mAdapter);
        searchView.setIconifiedByDefault(true);
        searchView.setMaxWidth( Integer.MAX_VALUE );
        searchMenuItem = menu.findItem(R.id.search);
        if(!query.equals("")) {
            searchMenuItem.expandActionView();
            searchView.setQuery(query, false);
        }

        // Getting selected (clicked) item suggestions
        searchView.setOnSuggestionListener(new SearchView.OnSuggestionListener() {
            @Override
            public boolean onSuggestionClick(int position) {
                Cursor searchCursor = mAdapter.getCursor();
                String selected = searchCursor.toString();
                if(searchCursor.moveToPosition(position)) {
                    selected = searchCursor.getString(1);
                }
                RecipeData data = new RecipeData(selected);
                data.execute("");
                if (searchView != null) {
                    searchView.setIconified(true);

                }
                return true;
            }

            @Override
            public boolean onSuggestionSelect(int position) {
                return false;
            }
        });
        searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {
            @Override
            public boolean onQueryTextSubmit(String s) {
                Log.e("SearchView:", "inside onQueryTextSubmit" + s);
                RecipeData data = new RecipeData(s); //TODO implementare qui fragment con lista di ricette se premi invio?
                data.execute("");
                if (searchView != null) {
                    searchView.setIconified(true);

                }
                return true;
            }

            @Override
            public boolean onQueryTextChange(String s) {
                populateAdapter(s);
                return false;
            }
        });
        searchView.setOnQueryTextFocusChangeListener(new View.OnFocusChangeListener() {
            @Override
            public void onFocusChange(View view, boolean queryTextFocused) {
                if(!queryTextFocused) {
                    searchMenuItem.collapseActionView();
                    searchView.setQuery("", false);
                }
            }
        });


        super.onPrepareOptionsMenu(menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(final MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();

        //noinspection SimplifiableIfStatement
        if (id == R.id.action_settings) {
            return true;
        }

        if(id == R.id.button_filters) {
            DrawerLayout drawer_filters = (DrawerLayout) this.findViewById(R.id.drawer_layout);
           drawer_filters.openDrawer(Gravity.RIGHT);
        }

        return super.onOptionsItemSelected(item);
    }

    @Override
    protected void onResume() {
        Log.e(TAG, "onResume: ");
        super.onResume();
        navigationView = (NavigationView) findViewById(R.id.nav_view);
        resumeFilterView();
        if(navigationView.getMenu().findItem(R.id.search)!=null) {
        searchView = (SearchView) MenuItemCompat
                .getActionView(navigationView.getMenu().findItem(R.id.search));
        searchMenuItem = navigationView.getMenu().findItem(R.id.search);
        }

        if(searchMenuItem!= null && searchView!=null) {
            searchMenuItem.collapseActionView();
        }
        final AWSMobileClient awsMobileClient = AWSMobileClient.defaultMobileClient();
    }

    @Override
    protected void onPause() {
        Log.e(TAG, "onPause: ");
        super.onPause();
    }

    @Override
    protected void onSaveInstanceState(Bundle bundle) {
        // state for the first SearchView
        if(searchMenuItem != null ) {
            isSearchViewOpen = searchMenuItem.isActionViewExpanded();
            Log.e(TAG, "SearchView, onSaveInstanca" + isSearchViewOpen);
            bundle.putString("search", searchView.getQuery().toString());
        }
        super.onSaveInstanceState(bundle);
    }

    @Override
    protected void onRestoreInstanceState(Bundle savedInstanceState) {
        super.onRestoreInstanceState(savedInstanceState);
        Log.e(TAG, "searchView onRestoreInstanceState " + isSearchViewOpen);
        // properly set the state to balance Android's own restore mechanism
        if(isSearchViewOpen) {
            searchMenuItem.expandActionView();
        }
        query = savedInstanceState.getString("search");
    }

    @Override
    public void onCategorySelected(String categorySelectedName) {
        // The user selected a category from FragmentCategoriesList
        Log.e(TAG, "onCategorySelected: " + categorySelectedName);

        // Do something here to display that article

        //TODO checkare 2 pane layout or not
                /*
            FragmentRecipesList articleFrag = (FragmentRecipesList)
                    getSupportFragmentManager().findFragmentById(R.id.article_fragment);

            if (articleFrag != null) {
                // If article frag is available, we're in two-pane layout...

                // Call a method in the ArticleFragment to update its content
                articleFrag.updateArticleView(position);

            } else  */
        {
            // Otherwise, we're in the one-pane layout and must swap frags...

            // Create fragment and give it an argument for the selected category
            FragmentRecipesList newFragment = FragmentRecipesList.newInstance(categorySelectedName);

            FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();

            // Replace whatever is in the main_fragment_container view with this fragment,
            // and add the transaction to the back stack so the user can navigate back
            transaction.replace(R.id.main_fragment_container, newFragment);
            transaction.addToBackStack(FragmentRecipesList.class.getName());

            // Commit the transaction
            transaction.commit();
        }
    }

    public Bundle getCategoryBundle() {
        return categoryBundle;
    }

    @Override
    public void onRecipeSelected(Recipe recipeSelected) {
        // The user selected a recipe from FragmentRecipesList
        Log.e(TAG, "onRecipeSelected: " + recipeSelected.getName());

        Intent intent = new Intent(this, ActivityRecipe.class);
        intent.putExtra(RECIPE_SELECTED, recipeSelected);
        startActivity(intent);
    }

    @Override
    public void onShoppingListFragmentInteraction(ShoppingItem item, int position) {
        //TODO checkare 2 pane layout or not
                /*
            FragmentRecipesList articleFrag = (FragmentRecipesList)
                    getSupportFragmentManager().findFragmentById(R.id.article_fragment);

            if (articleFrag != null) {
                // If article frag is available, we're in two-pane layout...

                // Call a method in the ArticleFragment to update its content
                articleFrag.updateArticleView(position);

            } else
        { */
        // Otherwise, we're in the one-pane layout and must swap frags...

        // Create fragment and give it an argument for the selected category
        FragmentShoppingListIngredients newFragment = FragmentShoppingListIngredients.newInstance(item, position);

        FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();

        // Replace whatever is in the main_fragment_container view with this fragment,
        // and add the transaction to the back stack so the user can navigate back
        transaction.replace(R.id.main_fragment_container, newFragment);
        transaction.addToBackStack(FragmentRecipesList.class.getName());

        // Commit the transaction
        transaction.commit();


    }

    @Override
    public void OnShoppingListIngredientFragmentInteraction(ShoppingItem item) {
        Log.e(TAG, "OnShoppingListIngredientFragmentInteraction: switching to ActivityRecipe by recipeName");
        Intent intent = new Intent(getApplication(), ActivityRecipe.class);
        intent.putExtra(RECIPE_NAME_SELECTED, item.getRecipe());
        startActivity(intent);
    /*    RecipeData data = new RecipeData(item.getRecipe());
        data.execute(""); */
    }

    @Override
    public void OnShoppingListIngredientFragmentDeletion(final ShoppingItem shoppingItem, final int position) {
        //TODO checkare 2 pane layout or not
                /*
            FragmentRecipesList articleFrag = (FragmentRecipesList)
                    getSupportFragmentManager().findFragmentById(R.id.article_fragment);

            if (articleFrag != null) {
                // If article frag is available, we're in two-pane layout...

                // Call a method in the ArticleFragment to update its content
                articleFrag.updateArticleView(position);

            } else
        { */
        // Otherwise, we're in the one-pane layout and must swap frags...
        // Create fragment and give it an argument for the selected category

        android.support.v4.app.FragmentManager supportFragmentManager = getSupportFragmentManager();
        supportFragmentManager.popBackStack(null, FragmentManager.POP_BACK_STACK_INCLUSIVE);
        FragmentTransaction transaction = supportFragmentManager.beginTransaction();
        Class fragmentClass = FragmentShoppingList.class;
        final Fragment newFragment = Fragment.instantiate(this, fragmentClass.getName());
        // Replace whatever is in the main_fragment_container view with this fragment
        transaction.replace(R.id.main_fragment_container, newFragment, fragmentClass.getSimpleName());


        // Commit the transaction
        transaction.commit();

        Snackbar.make(findViewById(R.id.drawer_layout), R.string.fragment_shoppinglist_snackbar_removed, Snackbar.LENGTH_LONG)
                .setAction(R.string.fragment_shoppinglist_snackbar_undo, new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {
                        ((FragmentShoppingList)newFragment).addElement(shoppingItem, position);
                        ((FragmentShoppingList)newFragment).checkEmptyList(null);
                    }
                }).show();
    }

    @Override
    public void onFavoritesListFragmentInteraction(FavoriteItem item) {
        Log.e(TAG, "OnFavoritesListIngredientFragmentInteraction: switching to ActivityRecipe by recipeName");
        Intent intent = new Intent(getApplication(), ActivityRecipe.class);
        intent.putExtra(RECIPE_NAME_SELECTED, item.getRecipe());
        startActivity(intent);
        /* RecipeData data = new RecipeData(item.getRecipe());
        data.execute(""); */
    }

    /**
     * Populate the adapter with the suggestion form the DB about recipe
     * @param query
     */
    private void populateAdapter(String query) {
        final MatrixCursor c = new MatrixCursor(new String[]{ BaseColumns._ID, "recipeName" });
        for (int i=0; i< recipeNameList.size(); i++) {
            if (recipeNameList.get(i).toLowerCase().contains(query.toLowerCase()))
                c.addRow(new Object[] {i, recipeNameList.get(i)});
        }
        mAdapter.changeCursor(c);
    }

    /**
     * Private class that performs task of retrieving data in background
     */
    private class RecipeData extends AsyncTask<String, Void, Recipe> {

        String recipe;

        protected RecipeData(String recipe) {
            this.recipe = wellFormattedString(recipe);
        }
        /**
         * This method runs in background to retrieve data from database
         * @param
         * @return
         */
        public Recipe doInBackground(String...strings) {
            Recipe recipeItem = new Recipe();
            recipeItem.setName(recipe);
            DynamoDBQueryExpression<Recipe> queryExpression = new DynamoDBQueryExpression<Recipe>()
                    .withHashKeyValues(recipeItem);

            List<Recipe> result = mapper.query(Recipe.class, queryExpression);
            if(result.size() != 0) {
                String imageUri = result.get(0).getCategory() + "/" + result.get(0).getImage() + ".jpg";
                result.get(0).setImage(imageUri);
                return result.get(0);
            }  else {
                return null;
            }
        }

        protected void onPostExecute(Recipe result) {
            if(result != null) {
                Log.e(TAG, "onShoppingListFragmentInteraction: recipe selected from the shopping list FOUND in DB, called " + result.getName());
                //..we start its activity
                Intent intent = new Intent(getApplication(), ActivityRecipe.class);
                intent.putExtra(RECIPE_SELECTED, result);
                startActivity(intent);
            } else {
                Log.e(TAG, "onShoppingListFragmentInteraction: recipe selected from the shopping list not found in DB" );
            }
        }
    }


    /**
     * Method needed to retireve shared preferences when they are set
     */
    public void setSharedPref() {

        Thread thread2 = new Thread(new Runnable() {
            @Override
            public void run() {
                boolean sharedNotNull = false;
                SharedPreferences sharedPref = null;
                 while(!sharedNotNull) {
                     sharedPref = getSharedPreferences(
                             "recipeNameList", Context.MODE_PRIVATE);
                     if (sharedPref != null) {
                         sharedNotNull = true;
                     }
                 }
                    Set<String> s = sharedPref.getStringSet("recipeNameList", null);
                    recipeNameList = new ArrayList<String>(s);
                }
        });
        thread2.start();
    }

    /**
     * Needed to format correct strings to pass to the search query
     * @param s
     * @return
     */
    private String wellFormattedString(String s) {
        String[] temp = s.split(" ");
        String output = Character.toUpperCase(temp[0].charAt(0)) + temp[0].substring(1) + " ";
        for(int i = 1; i < temp.length; i++) {
            output = output.concat(temp[i] + " ");
        }
        output = output.trim();
        return output;
    }

    @Override
    protected void onPostCreate(Bundle bundle) {
        super.onPostCreate(bundle);
        mDrawerToggle.syncState();
    }

    @Override
    public void onConfigurationChanged(Configuration configuration){
        super.onConfigurationChanged(configuration);
        mDrawerToggle.onConfigurationChanged(configuration);
        resumeFilterView();
    }

    private String getLastTimeFilterActive() {
        String[] timeFilters = getResources().getStringArray(R.array.Preparation_Time);
        Filter filter = Filter.getInstance(getApplicationContext());
        String activeFilterTime = "null";
        for(int i = 0; i < timeFilters.length; i++) {
           if((filter.getFilterStatus(timeFilters[i])).equals(ACTIVE_FILTER)) {
               activeFilterTime = timeFilters[i];
               break;
           }
        }
        return activeFilterTime;
    }

    /**
     * Method called to resume the view of filters when the application get Resumed
     */
    private void resumeFilterView() {
        Filter filter = Filter.getInstance(getApplicationContext());
        ArrayList<String> active = filter.getActivatedFilters();
        navigationViewFilters = (NavigationView) findViewById(R.id.nav_filters);
        MenuItem menuItem;
        if(active != null) {
            for(String f: active) {
                switch (f) {
                    case "Easy":
                        menuItem = navigationViewFilters.getMenu().findItem(R.id.difficulty_easy);
                        menuItem.setChecked(true);
                        break;
                    case "Medium":
                        menuItem = navigationViewFilters.getMenu().findItem(R.id.difficulty_medium);
                        menuItem.setChecked(true);
                        break;
                    case "Hard":
                        menuItem = navigationViewFilters.getMenu().findItem(R.id.difficulty_hard);
                        menuItem.setChecked(true);
                        break;
                    case "Less than 20 minutes":
                        menuItem = navigationViewFilters.getMenu().findItem(R.id.time_20);
                        menuItem.setChecked(true);
                        break;
                    case "Less than 30 minutes":
                        menuItem = navigationViewFilters.getMenu().findItem(R.id.time_30);
                        menuItem.setChecked(true);
                        break;
                    case "Less than 60 minutes":
                        menuItem = navigationViewFilters.getMenu().findItem(R.id.time_60);
                        menuItem.setChecked(true);
                        break;
                    case "Asia":
                        menuItem = navigationViewFilters.getMenu().findItem(R.id.country_asia);
                        menuItem.setChecked(true);
                        break;
                    case "England":
                        menuItem = navigationViewFilters.getMenu().findItem(R.id.country_england);
                        menuItem.setChecked(true);
                        break;
                    case "Italy":
                        menuItem = navigationViewFilters.getMenu().findItem(R.id.country_italy);
                        menuItem.setChecked(true);
                        break;
                    case "France":
                        menuItem = navigationViewFilters.getMenu().findItem(R.id.country_france);
                        menuItem.setChecked(true);
                        break;
                    case "America":
                        menuItem = navigationViewFilters.getMenu().findItem(R.id.country_america);
                        menuItem.setChecked(true);
                        break;
                    case "Middle-Orient":
                        menuItem = navigationViewFilters.getMenu().findItem(R.id.country_middle_orient);
                        menuItem.setChecked(true);
                        break;
                    default:
                        break;

                }
            }

        }
    }

    /**
     * Retrieve drawer item by its name
     * @param name
     * @return
     */
    private MenuItem getPreviousMenuItem(String name) {
        MenuItem filterId = null;
        switch(name) {
            case "Less than 20 minutes":
                filterId = navigationViewFilters.getMenu().findItem(R.id.time_20);
                break;
            case "Less than 30 minutes":
                filterId = navigationViewFilters.getMenu().findItem(R.id.time_30);
                break;
            case "Less than 60 minutes":
                filterId = navigationViewFilters.getMenu().findItem(R.id.time_60);
                break;
            default:
                break;
        }
        return filterId;
    }

}





